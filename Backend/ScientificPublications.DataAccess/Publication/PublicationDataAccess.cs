using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using ScientificPublications.Common;
using ScientificPublications.Common.Exceptions;
using ScientificPublications.Common.Extensions;
using ScientificPublications.Common.Helpers;
using ScientificPublications.Common.Settings;
using ScientificPublications.DataAccess.Model;
using System;
using System.Threading.Tasks;

namespace ScientificPublications.DataAccess.Publication
{
    public class PublicationDataAccess : AbstractDataAccess, IPublicationDataAccess
    {
        public PublicationDataAccess(IOptions<AppSettings> appSettings, ILogger<AbstractDataAccess> logger) : base(appSettings, logger, Constants.JavaController.Publication)
        {
        }
        // TODO: prevent user to access forbidden publications
        public async Task<Publications> FindByAuthor(string authorUsername)
        {
            try
            {
                var path = BaseUrl.UrlCombine(authorUsername);
                return await HttpHelper.Get<Publications>(path);
            }
            catch (Exception e)
            {
                throw new ProxyException(Constants.ExceptionMessages.DatabaseException, e);
            }
        }
        // TODO: id should be autogenerated, xsd is currently preventing it
        public async Task InsertAsync(Model.publication publication)
        {
            try
            {
                var path = BaseUrl.UrlCombine("insert");
                await HttpHelper.Post(path, publication);
            }
            catch (Exception e)
            {
                throw new ProxyException(Constants.ExceptionMessages.DatabaseException, e);
            }
        }
    }
}
